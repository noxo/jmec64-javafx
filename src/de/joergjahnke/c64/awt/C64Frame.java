/*
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation. For the full
 * license text, see http://www.gnu.org/licenses/gpl.html.
 */
package de.joergjahnke.c64.awt;

import de.joergjahnke.common.awt.OptionPane;
import de.joergjahnke.common.vmabstraction.sunvm.SunVMResourceLoader;
import de.joergjahnke.c64.core.C64;
import de.joergjahnke.c64.core.C1541;
import de.joergjahnke.c64.drive.DriveHandler;
import de.joergjahnke.c64.extendeddevices.EmulatorUtils;
import de.joergjahnke.common.extendeddevices.WavePlayer;
import de.joergjahnke.common.util.Logger;
import de.joergjahnke.common.util.Observer;
import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.FileDialog;
import java.awt.Frame;
import java.awt.MenuShortcut;
import java.awt.Toolkit;
import java.awt.event.ItemEvent;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.InputStream;
import java.util.Vector;

/**
 * Main window of the C64 emulator
 *
 * @author  Joerg Jahnke (joergjahnke@users.sourceforge.net)
 */
public class C64Frame extends Frame implements Observer {

    /**
     * Current program version
     */
    public final static String VERSION = "1.1";
    // main canvas
    private C64Canvas canvas = null;
    // C64 instance
    private C64 c64 = null;
    // last selected file, used to point to the same directory as before with the file dialog
    private File lastFile = null;

    /**
     * Creates new form C64Frame
     */
    public C64Frame() {
        initComponents();

        this.canvas = new C64Canvas(this);

        try {
            // create C64 instance and inform the canvas about this instance
            
        	this.c64 = new C64(new SunVMResourceLoader());
            
            this.canvas.setC64(c64);
            this.c64.getVIC().setFrameSkip(1);

            // create a player that observes the SID and plays its sound
            this.c64.getSID().addObserver(new WavePlayer(this.c64.getSID()));

            // add canvas to this window and resize accordingly
            add(this.canvas, BorderLayout.CENTER);
            pack();

            final Dimension d = Toolkit.getDefaultToolkit().getScreenSize();

            setLocation((d.width - getSize().width) / 2, (d.height - getSize().height) / 2);
            setResizable(false);

            // also register as observer to get informed about drive operations
            for (int i = 0; i < C64.MAX_NUM_DRIVES; ++i) {
                this.c64.getDrive(i).addObserver(this);
            }

            // start the emulation
            new Thread(this.c64).start();
        } catch (Exception e) {
            e.printStackTrace();
            throw new RuntimeException("Could not initialize game! The error message was:\n" + e);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {
        menuBar = new java.awt.MenuBar();
        menuFile = new java.awt.Menu();
        menuItemAttachImage = new java.awt.MenuItem();
        menuItemLoadProgram = new java.awt.MenuItem();
        menuItemFastLoadProgram = new java.awt.MenuItem();
        menuItemExit = new java.awt.MenuItem();
        menuEmulation = new java.awt.Menu();
        menuItemTypeText = new java.awt.MenuItem();
        menuItemSpecialKey = new java.awt.MenuItem();
        menuJoystick = new java.awt.Menu();
        menuItemJoystick1 = new java.awt.CheckboxMenuItem();
        menuItemJoystick2 = new java.awt.CheckboxMenuItem();
        menuItemRun = new java.awt.MenuItem();
        menuItemShowLog = new java.awt.MenuItem();
        menuItemReset = new java.awt.MenuItem();
        menuSize = new java.awt.Menu();
        menuItemSizeX1 = new java.awt.MenuItem();
        menuItemSizeX2 = new java.awt.MenuItem();
        menuItemSizeX3 = new java.awt.MenuItem();
        menuHelp = new java.awt.Menu();
        menuItemAbout = new java.awt.MenuItem();
        menuItemContents = new java.awt.MenuItem();

        setTitle("JAWTC64");
        menuFile.setLabel("File");
        menuItemAttachImage.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_A, false));
        menuItemAttachImage.setLabel("Attach Image...");
        menuItemAttachImage.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAttachImageActionPerformed(evt);
            }
        });

        menuFile.add(menuItemAttachImage);

        menuItemFastLoadProgram.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_F, false));
        menuItemFastLoadProgram.setLabel("Fast-Load program...");
        menuItemFastLoadProgram.setEnabled(false);
        menuItemFastLoadProgram.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadProgramActionPerformed(evt);
            }
        });

        menuFile.add(menuItemFastLoadProgram);

        menuItemLoadProgram.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_L, false));
        menuItemLoadProgram.setLabel("Load program...");
        menuItemLoadProgram.setEnabled(false);
        menuItemLoadProgram.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemLoadProgramActionPerformed(evt);
            }
        });

        menuFile.add(menuItemLoadProgram);

        menuFile.addSeparator();

        menuItemExit.setLabel("Exit");
        menuItemExit.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemExitActionPerformed(evt);
            }
        });

        menuFile.add(menuItemExit);

        menuBar.add(menuFile);

        menuEmulation.setLabel("Emulation");
        menuItemTypeText.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_T, false));
        menuItemTypeText.setLabel("Type text...");
        menuItemTypeText.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemTypeTextActionPerformed(evt);
            }
        });

        menuEmulation.add(menuItemTypeText);

        menuItemSpecialKey.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_S, false));
        menuItemSpecialKey.setLabel("Enter a special C64 key");
        menuItemSpecialKey.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSpecialKeyActionPerformed(evt);
            }
        });

        menuEmulation.add(menuItemSpecialKey);

        menuItemJoystick1.setLabel("Port 1");
        menuItemJoystick1.setState(true);
        menuItemJoystick1.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(ItemEvent evt) {
                menuItemJoystick1ActionPerformed(evt);
            }
        });

        menuJoystick.add(menuItemJoystick1);

        menuItemJoystick2.setLabel("Port 2");
        menuItemJoystick2.addItemListener(new java.awt.event.ItemListener() {

            public void itemStateChanged(ItemEvent evt) {
                menuItemJoystick2ActionPerformed(evt);
            }
        });

        menuJoystick.add(menuItemJoystick2);

        menuJoystick.setLabel("Joystick");

        menuEmulation.add(menuJoystick);

        menuItemRun.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_R, false));
        menuItemRun.setLabel("Run current program");
        menuItemRun.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRunActionPerformed(evt);
            }
        });

        menuEmulation.add(menuItemRun);

        menuItemReset.setLabel("Reset C64");
        menuItemReset.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemResetActionPerformed(evt);
            }
        });

        menuEmulation.add(menuItemReset);

        menuSize.setLabel("Size");
        menuItemSizeX1.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_1, false));
        menuItemSizeX1.setLabel("100%");
        menuItemSizeX1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSizeX1ActionPerformed(evt);
            }
        });

        menuSize.add(menuItemSizeX1);

        menuItemSizeX2.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_2, false));
        menuItemSizeX2.setLabel("200%");
        menuItemSizeX2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSizeX2ActionPerformed(evt);
            }
        });

        menuSize.add(menuItemSizeX2);

        menuItemSizeX3.setShortcut(new MenuShortcut(java.awt.event.KeyEvent.VK_3, false));
        menuItemSizeX3.setLabel("300%");
        menuItemSizeX3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSizeX3ActionPerformed(evt);
            }
        });

        menuSize.add(menuItemSizeX3);

        menuEmulation.add(menuSize);

        menuItemShowLog.setLabel("Show log");
        menuItemShowLog.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemShowLogActionPerformed(evt);
            }
        });

        menuEmulation.add(menuItemShowLog);

        menuBar.add(menuEmulation);

        menuHelp.setLabel("Help");
        menuItemAbout.setLabel("About");
        menuItemAbout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemAboutActionPerformed(evt);
            }
        });

        menuHelp.add(menuItemAbout);

        menuItemContents.setLabel("Contents");
        menuItemContents.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemContentsActionPerformed(evt);
            }
        });

        menuHelp.add(menuItemContents);

        menuBar.add(menuHelp);

        setMenuBar(menuBar);

        this.addWindowListener(new WindowAdapter() {

            public void windowClosing(WindowEvent e) {
                menuItemExitActionPerformed(null);
            }
        });

        pack();
    }

    private void menuItemSizeX1ActionPerformed(java.awt.event.ActionEvent evt) {
        this.canvas.setScaling(1);
        pack();
    }

    private void menuItemSizeX2ActionPerformed(java.awt.event.ActionEvent evt) {
        this.canvas.setScaling(2);
        pack();
    }

    private void menuItemSizeX3ActionPerformed(java.awt.event.ActionEvent evt) {
        this.canvas.setScaling(3);
        pack();
    }

    private void menuItemJoystick1ActionPerformed(java.awt.event.ItemEvent evt) {
        this.c64.setActiveJoystick(0);
        this.menuItemJoystick1.setState(true);
        this.menuItemJoystick2.setState(false);
    }

    private void menuItemJoystick2ActionPerformed(java.awt.event.ItemEvent evt) {
        this.c64.setActiveJoystick(1);
        this.menuItemJoystick1.setState(false);
        this.menuItemJoystick2.setState(true);
    }

    private void menuItemContentsActionPerformed(java.awt.event.ActionEvent evt) {
        final InputStream is = getClass().getResourceAsStream("/docs/help.html");
        final StringBuffer buf = new StringBuffer();

        try {
            for (int c; (c = is.read()) >= 0;) {
                buf.append((char) c);
            }

            String help = buf.toString();

            help = help.replaceAll("<[^>]*>", "");
            help = help.replaceAll("&amp;", "&");
            help = help.replaceAll("&quot;", "\"");
            help = help.replaceAll("&bdquo;", "\"");
            help = help.replaceAll("&ldquo;", "\"");
            help = help.replaceAll("\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a", "\r\n\r\n");
            help = help.replaceAll("\\x0d\\x0a\\x0d\\x0a\\x0d\\x0a", "\r\n\r\n");
            help = help.replaceAll("\\A[\\x0d\\x0a]+", "");

            OptionPane.showMessageDialog(this, help, "AWTC64 Simple Help", OptionPane.PLAIN_MESSAGE);
        } catch (IOException e) {
            OptionPane.showMessageDialog(this, e.getMessage(), "An error occurred while loading the help file", OptionPane.ERROR_MESSAGE);
        }
    }

    private void menuItemAboutActionPerformed(java.awt.event.ActionEvent evt) {
        OptionPane.showMessageDialog(this, "Copyright 2006-2008 by Joerg Jahnke.\nVersion " + VERSION + ".\nThe original Commodore 64 ROM images are included with kind permission of Commodore International Corporation (http://www.commodoreworld.com/).\nThis program is freeware for non-commercial use and is distributed without any warranties.");
    }

    private void menuItemSpecialKeyActionPerformed(java.awt.event.ActionEvent evt) {
        // show a dialog to let the user select the special key
        final String[] specialKeys = {"Run", "F1", "F3", "F5", "F7", "Space", "Enter", "Delete", "Break"};
        final Object key = OptionPane.showInputDialog(this, "Select key", "Special keys", OptionPane.PLAIN_MESSAGE, null, specialKeys, null);

        if (null != key) {
            this.c64.getKeyboard().keyTyped(key.toString().toUpperCase());
        }
    }

    private void menuItemTypeTextActionPerformed(java.awt.event.ActionEvent evt) {
        final Object text = OptionPane.showInputDialog(this, "Text to enter?", "Type text", 0, null, this.c64.getKeyboard().getTypedTexts().toArray(), null);

        if (null != text) {
            this.c64.getKeyboard().textTyped(text.toString());
        }
    }

    private void menuItemLoadProgramActionPerformed(java.awt.event.ActionEvent evt) {
        // do we have programs to display?
        final Vector programs = this.c64.getDrive(this.c64.getActiveDrive()).getFilenames();

        if (programs.isEmpty()) {
            // if not, then tell the user to first attach an image
            OptionPane.showMessageDialog(this, "Please attach a C64 image before loading a program. There is either no image attached or the current image does not contain any programs.", "No programs to load", OptionPane.WARNING_MESSAGE);
        } else {
            // show a dialog to let the user select the program
            final Object program = OptionPane.showInputDialog(this, "Select program to load", "Load program", OptionPane.PLAIN_MESSAGE, null, programs.toArray(), programs.elementAt(0));

            if (null != program) {
                if (evt.getActionCommand().indexOf("Fast") < 0) {
                    this.c64.loadFile(program.toString());
                } else {
                    try {
                        this.c64.fastLoadFile(program.toString(), -1);
                    } catch (IOException e) {
                        e.printStackTrace();
                        OptionPane.showMessageDialog(this, "Could not load file " + program.toString() + "!\n" + e, "Could not load file", OptionPane.WARNING_MESSAGE);
                    }
                }
            }
        }
    }

    private void menuItemRunActionPerformed(java.awt.event.ActionEvent evt) {
        this.c64.getKeyboard().textTyped("run");
        this.c64.getKeyboard().keyTyped("ENTER");
    }

    private void menuItemResetActionPerformed(java.awt.event.ActionEvent evt) {
        this.c64.reset();
        this.menuItemLoadProgram.setEnabled(false);
        this.menuItemFastLoadProgram.setEnabled(false);
    }

    private void menuItemExitActionPerformed(java.awt.event.ActionEvent evt) {
        this.setVisible(false);
        System.exit(0);
    }

    private void menuItemAttachImageActionPerformed(java.awt.event.ActionEvent evt) {
        // show a dialog to select the C64 file to attach
        final FileDialog fileChooser = new FileDialog(this);

        fileChooser.setFilenameFilter(
                new FilenameFilter() {

                    public boolean accept(final File f, final String name) {
                        return name.toLowerCase().endsWith(".d64") || name.toLowerCase().endsWith(".t64") || name.toLowerCase().endsWith(".prg") || name.toLowerCase().endsWith(".p00") || f.getName().toLowerCase().endsWith(EmulatorUtils.DELTA_FILE_EXTENSION) || f.isDirectory();
                    }
                });
        fileChooser.setVisible(true);

        // a file was selected?
        if (fileChooser.getFile() != null) {
            // then attach the selected file
            final File file = new File(fileChooser.getDirectory() + fileChooser.getFile());

            try {
                this.lastFile = EmulatorUtils.attachImage(this.c64, c64.getActiveDrive(), file.getAbsolutePath());

                this.menuItemFastLoadProgram.setEnabled(true);
                this.menuItemLoadProgram.setEnabled(true);
            } catch (IOException e) {
                OptionPane.showMessageDialog(this, "Could not load file " + file + "!", "Could not load file", OptionPane.ERROR_MESSAGE);
            }
        }
    }

    private void menuItemShowLogActionPerformed(java.awt.event.ActionEvent evt) {
        OptionPane.showMessageDialog(this, this.c64.getLogger().dumpAll(), "JSwingC64 Log Entries", OptionPane.PLAIN_MESSAGE);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new C64Frame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private java.awt.MenuBar menuBar;
    private java.awt.Menu menuEmulation;
    private java.awt.Menu menuFile;
    private java.awt.Menu menuHelp;
    private java.awt.MenuItem menuItemContents;
    private java.awt.MenuItem menuItemAbout;
    private java.awt.MenuItem menuItemAttachImage;
    private java.awt.MenuItem menuItemExit;
    private java.awt.MenuItem menuItemLoadProgram;
    private java.awt.MenuItem menuItemFastLoadProgram;
    private java.awt.MenuItem menuItemReset;
    private java.awt.MenuItem menuItemRun;
    private java.awt.MenuItem menuItemShowLog;
    private java.awt.MenuItem menuItemSizeX1;
    private java.awt.MenuItem menuItemSizeX2;
    private java.awt.MenuItem menuItemSizeX3;
    private java.awt.MenuItem menuItemSpecialKey;
    private java.awt.Menu menuJoystick;
    private java.awt.CheckboxMenuItem menuItemJoystick1;
    private java.awt.CheckboxMenuItem menuItemJoystick2;
    private java.awt.MenuItem menuItemTypeText;
    private java.awt.Menu menuSize;

    // implementation of the Observer interface
    /**
     * We show log messages in the status bar and save changes to modified emulator images
     */
    public void update(Object observed, Object arg) {
        // this update is from the C64's drive?
        if (observed instanceof C1541) {
            // a modified drive was reported?
            if (arg instanceof DriveHandler) {
                // save the delta to the current file
                try {
                    // create the delta to the original image
                    final InputStream in = new BufferedInputStream(new FileInputStream(this.lastFile));
                    final byte[] delta = ((DriveHandler) arg).createDelta(in);

                    // anything to do?
                    if (delta.length > 0) {
                        final File deltaFile = EmulatorUtils.saveDeltaFile(this.lastFile.getAbsolutePath(), delta);

                        this.c64.getLogger().info("Saved changes to file '" + deltaFile + "'!");
                    }
                } catch (IOException e) {
                    // we could not save the delta
                    e.printStackTrace();
                    this.c64.getLogger().warning("Could not save changes to image '" + this.lastFile + "'!");
                }
            }
        }
    }
}
